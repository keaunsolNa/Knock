upstream frontend {
    server front:3000;
}

upstream backend {
    server back:53287;
}

server {
    listen 443 ssl;
    server_name 203.229.246.216 localhost;

    ssl_certificate C:/DevTool/nginx/conf/selfsigned.crt;
    ssl_certificate_key C:/DevTool/nginx/conf/selfsigned.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # 기본 CORS 헤더 - 공통으로 사용
    add_header Access-Control-Allow-Origin http://localhost:3000 always;
    add_header Access-Control-Allow-Credentials true always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, Set-Cookie" always;

    # OPTIONS 요청에 대한 처리 (CORS preflight 대응)
    location / {
     if ($request_method = OPTIONS) {
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
     }

        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect off;
        proxy_read_timeout 90;
    }

    # API 요청 → 백엔드 전달
    location /api/ {

        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        proxy_pass https://backend/api;
        proxy_ssl_verify off;  # self-signed 인증서 사용할 경우 필요, 배포 환경의 경우 reverse-proxy nginx 시스템 미사용
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;

        proxy_cookie_path / "/; Secure; HttpOnly; SameSite=None";

    }

    # /auth 요청 → 백엔드로 전달
    location /auth/ {
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        proxy_pass https://backend/;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;

        proxy_cookie_path / "/; Secure; HttpOnly; SameSite=None";

    }

    # /user 요청 → 백엔드로 전달
    location /auth/ {
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        proxy_pass https://backend/;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;

        proxy_cookie_path / "/; Secure; HttpOnly; SameSite=None";

    }


    # /movie 경로는 프론트로 전달
    location /movie {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect off;
        proxy_read_timeout 90;
    }

    # /performingArts 경로는 프론트로 전달
    location /movie {
        proxy_pass http://performingArts;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect off;
        proxy_read_timeout 90;
    }

}